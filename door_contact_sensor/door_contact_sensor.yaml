blueprint:
  name: Lock Door with Retry Limit and Custom Timeouts
  description: |
    **Lock Door with Retry Limit and Custom Timeouts** is a Home Assistant automation blueprint designed to ensure your door remains securely locked. This automation monitors the state of your door lock and door sensor to maintain security. If the door fails to stay closed, the automation will attempt to lock it multiple times (up to a defined retry limit). After exceeding the maximum retries, it can send you a notification, allowing you to take further action. This blueprint offers customizable timeouts and integrates seamlessly with your existing Home Assistant setup.

    Please note that you **MUST** create a counter in Helpers. The counter variable name defaults to `counter.door_lock_retries`.
  domain: automation
  input:
    door_lock:
      name: Door Lock
      description: The lock device to control.
      selector:
        entity:
          domain: lock
    door_sensor:
      name: Door Sensor
      description: The door sensor to monitor (must detect open/closed states).
      selector:
        entity:
          domain: binary_sensor
    counter_variable:
      name: Counter variable
      description: The counter variable which was created using Helpers
      selector:
        text: {}
      default: "counter.door_lock_retries"
    max_retries:
      name: Max Retries
      description: The maximum number of attempts to lock the door before sending a notification.
      default: 3
      selector:
        number:
          min: 1
          max: 10
          unit_of_measurement: retries
    enable_notification:
      name: Enable Notification
      description: Whether to send a notification after max retries.
      default: false
      selector:
        boolean: {}
    notification_device:
      name: Notification Device
      description: The notification service to use (e.g., notify.mobile_app_your_device).
      selector:
        text: {}
      default: ""
    door_close_timeout:
      name: Door Close Timeout
      description: Time to wait for the door to close initially, in minutes.
      default: 1
      selector:
        number:
          min: 1
          max: 15
          unit_of_measurement: minutes
    verification_timeout:
      name: Verification Timeout
      description: Time to ensure the door remains closed, in minutes.
      default: 1
      selector:
        number:
          min: 1
          max: 15
          unit_of_measurement: minutes

variables:
  max_retries: !input max_retries
  door_close_timeout: !input door_close_timeout
  verification_timeout: !input verification_timeout
  enable_notification: !input enable_notification
  door_sensor: !input door_sensor
  door_lock: !input door_lock
  notification_device: !input notification_device
  counter_variable: !input counter_variable

trigger:
  - platform: state
    entity_id: !input door_lock
    to: "unlocked"

condition: []

actions:
  # Step 1: Check if retries have reached the limit (max_retries)
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ states(counter_variable) | int >= max_retries }}"
        sequence:
          - choose:
              # Send notification if enabled and retry limit is reached
              - conditions:
                  - condition: template
                    value_template: "{{ enable_notification }}"
                sequence:
                  - action: "{{ notification_device if notification_device else 'notify.notify' }}"
                    data:
                      message: "Door failed to lock after {{ max_retries }} attempts."
          # Reset retry counter if max retries are reached
          - action: counter.reset
            target:
              entity_id: "{{ counter_variable }}"

  # Step 2: Increment retry counter
  - action: counter.increment
    target:
      entity_id: "{{ counter_variable }}"

  # Step 3: Check if the door is already closed or wait until it is
  - wait_template: "{{ is_state(door_sensor, 'off') }}"
    timeout:
      minutes: "{{ door_close_timeout }}"
    continue_on_timeout: true

  # Step 4: Restart if the door didnâ€™t close within the timeout
  - choose:
      - conditions:
          - condition: state
            entity_id: !input door_sensor
            state: "on"
        sequence:
          - action: automation.trigger
            target:
              entity_id: "{{ this.entity_id }}"
            data:
              skip_condition: true

  # Step 5: Verify that the door remains closed for the verification timeout
  - wait_for_trigger:
      - platform: state
        entity_id: !input door_sensor
        to: "off"
    timeout:
      minutes: "{{ verification_timeout }}"
    continue_on_timeout: true

  # Step 6: Restart if the door reopened during the verification period
  - choose:
      - conditions:
          - condition: state
            entity_id: !input door_sensor
            state: "on"
        sequence:
          - action: automation.trigger
            target:
              entity_id: "{{ this.entity_id }}"
            data:
              skip_condition: true
    default:
      # Lock the door and reset the retry counter if successful
      - action: lock.lock
        target:
          entity_id: !input door_lock
      - action: counter.reset
        target:
          entity_id: "{{ counter_variable }}"
mode: restart

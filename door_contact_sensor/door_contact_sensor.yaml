blueprint:
  name: Lock Door with Retry Limit and Custom Timeouts
  description: |
    **Lock Door with Retry Limit and Custom Timeouts** is a Home Assistant automation blueprint designed to ensure your door remains securely locked. This automation monitors the state of your door lock and door sensor to maintain security. If the door fails to stay closed, the automation will attempt to lock it multiple times (up to a defined retry limit). After exceeding the maximum retries, it can send you a notification, allowing you to take further action. This blueprint offers customizable timeouts and integrates seamlessly with your existing Home Assistant setup.

    Please note that you **MUST** create a counter in Helpers. The counter variable name defaults to `counter.door_lock_retries`.
  domain: automation
  input:
    door_lock:
      name: Door Lock
      description: The lock device to control.
      selector:
        entity:
          domain: lock
    door_sensor:
      name: Door Sensor
      description: The door sensor to monitor (must detect open/closed states).
      selector:
        entity:
          domain: binary_sensor
    counter_variable:
      name: Counter variable
      description: The counter variable which was created using Helpers
      selector:
        text: {}
      default: "counter.door_lock_retries"
    max_retries:
      name: Max Retries
      description: The maximum number of attempts to lock the door before sending a notification.
      default: 3
      selector:
        number:
          min: 1
          max: 10
          unit_of_measurement: retries
    enable_notification:
      name: Enable Notification
      description: Whether to send a notification after max retries.
      default: false
      selector:
        boolean: {}
    notification_device:
      name: Notification Device
      description: The notification service to use (e.g., notify.mobile_app_your_device).
      selector:
        text: {}
      default: ""
    door_close_timeout:
      name: Door Close Timeout
      description: Time to wait for the door to close initially, in minutes.
      default: 1
      selector:
        number:
          min: 1
          max: 15
          unit_of_measurement: minutes
    verification_timeout:
      name: Verification Timeout
      description: Time to ensure the door remains closed, in minutes.
      default: 1
      selector:
        number:
          min: 1
          max: 15
          unit_of_measurement: minutes

variables:
  max_retries: !input max_retries
  door_close_timeout: !input door_close_timeout
  verification_timeout: !input verification_timeout
  enable_notification: !input enable_notification
  door_sensor: !input door_sensor
  door_lock: !input door_lock
  notification_device: !input notification_device
  counter_variable: !input counter_variable

trigger:
  # Trigger the automation when the door is unlocked or opened.
  - platform: state
    entity_id: !input door_lock
    to: "unlocked"
  - platform: state
    entity_id: !input door_sensor
    to: "on"

condition: []

actions:
  # Notify the start of the automation and the current retry count.
  - action: persistent_notification.create
    data:
      title: "Automation Debug"
      message: "Automation started. Counter: {{ states(counter_variable) | int }}"

  # Check if the maximum number of retries has been reached.
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ states(counter_variable) | int >= max_retries }}"
        sequence:
          # If retries exceed the limit, optionally notify the user and reset the counter.
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ enable_notification }}"
                sequence:
                  - action: "{{ notification_device if notification_device else 'notify.notify' }}"
                    data:
                      message: >-
                        Door failed to lock after {{ max_retries }} attempts.
          - action: counter.reset
            target:
              entity_id: "{{ counter_variable }}"

  # Increment the retry counter.
  - action: persistent_notification.create
    data:
      title: "Automation Debug"
      message: "Incrementing counter. Current value: {{ states(counter_variable) | int }}"
  - action: counter.increment
    target:
      entity_id: "{{ counter_variable }}"

  # Wait for the door to close.
  - action: persistent_notification.create
    data:
      title: "Automation Debug"
      message: "Waiting for door sensor to close ({{ door_sensor }})."
  - wait_template: "{{ is_state(door_sensor, 'off') }}"
    timeout:
      minutes: "{{ door_close_timeout }}"
    continue_on_timeout: true  # Continue even if the timeout is reached.

  # Check if the door is still open after the timeout, and if so, restart the automation.
  - action: persistent_notification.create
    data:
      title: "Automation Debug"
      message: "Door sensor state: {{ is_state(door_sensor, 'on') }}"
  - choose:
      - conditions:
          - condition: state
            entity_id: !input door_sensor
            state: "on"
        sequence:
          - action: persistent_notification.create
            data:
              title: "Automation Debug"
              message: "Restarting automation due to open door."
          - action: automation.trigger
            target:
              entity_id: "{{ this.entity_id }}"

  # Wait for the door to stay closed for the verification timeout period.
  - action: persistent_notification.create
    data:
      title: "Automation Debug"
      message: "Waiting for verification timeout or door to close."
  - wait_for_trigger:
      - platform: state
        entity_id: !input door_sensor
        to: "off"
    timeout:
      minutes: "{{ verification_timeout }}"
    continue_on_timeout: true

  # If the door is still open after verification, restart the automation.
  - action: persistent_notification.create
    data:
      title: "Automation Debug"
      message: "Verification check complete. Door sensor state: {{ is_state(door_sensor, 'on') }}"
  - choose:
      - conditions:
          - condition: state
            entity_id: !input door_sensor
            state: "on"
        sequence:
          - action: persistent_notification.create
            data:
              title: "Automation Debug"
              message: "Restarting automation again due to open door."
          - action: automation.trigger
            target:
              entity_id: "{{ this.entity_id }}"
    # If the door is confirmed closed, attempt to lock it and reset the counter.
    default:
      - action: persistent_notification.create
        data:
          title: "Automation Debug"
          message: "Locking door. Resetting counter."
      - action: lock.lock
        target:
          entity_id: !input door_lock
      - action: counter.reset
        target:
          entity_id: "{{ counter_variable }}"

  # Notify that the automation has completed successfully.
  - action: persistent_notification.create
    data:
      title: "Automation Debug"
      message: "Automation finished."

mode: restart  # Allows the automation to restart if triggered again while running.
